using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

// Token: 0x02000001 RID: 1
internal class <Module>
{
	// Token: 0x06000001 RID: 1 RVA: 0x00003F10 File Offset: 0x00002110
	unsafe static <Module>()
	{
		uint num = 1856U;
		uint[] array = new uint[]
		{
			705255420U, 3260710700U, 3825522447U, 1909838017U, 3935444569U, 1764625181U, 988244139U, 94353578U, 156029342U, 1927699421U,
			3486076283U, 487845932U, 437313022U, 266611264U, 3042006429U, 1105796077U, 495842093U, 2237456139U, 1825214642U, 399262939U,
			329179876U, 3731361262U, 838920133U, 3276562337U, 1665821552U, 1896720466U, 201816649U, 3456664402U, 802633905U, 2521007135U,
			2680379525U, 2223127684U, 11916341U, 520440876U, 3924314606U, 334982071U, 1343063658U, 3384211600U, 716262367U, 957541363U,
			589884998U, 3332679568U, 2799444002U, 1344109459U, 1791011533U, 3710360348U, 2555154932U, 2300359313U, 2452585897U, 3240494941U,
			2240004902U, 438694399U, 4092690958U, 2755994310U, 2511997896U, 535158266U, 308412669U, 2007075729U, 742149312U, 1539457622U,
			2614545627U, 1822678000U, 1823114930U, 3277774968U, 4207101877U, 3164878378U, 2877983234U, 2363134996U, 1176621304U, 1371760781U,
			3910029886U, 3850109574U, 1786625177U, 38766756U, 784578725U, 1600790262U, 739763178U, 3175386799U, 351827983U, 3529637992U,
			2135543712U, 3753781983U, 242113219U, 4189160384U, 2571139433U, 2227948563U, 3383773311U, 1574184613U, 3547075060U, 4169773881U,
			3055683438U, 242781832U, 833571794U, 3244234127U, 246290965U, 3234280039U, 922106615U, 505211128U, 856430200U, 3106925225U,
			1856010293U, 2347198606U, 2692945717U, 1474980297U, 2368876956U, 58519825U, 288492753U, 2952245299U, 3914463812U, 1395809768U,
			1596018632U, 3571849159U, 3460104809U, 3276626428U, 3804252399U, 994978537U, 245910544U, 3365235210U, 2605053646U, 2498509350U,
			2942973016U, 1632579384U, 3363596545U, 3139124231U, 5632430U, 2618542655U, 1824304834U, 3938284572U, 3289338262U, 924908215U,
			1282393501U, 215002902U, 976216250U, 4231356685U, 3735016696U, 384250145U, 3266489110U, 4215757465U, 3827097357U, 611398809U,
			3626880626U, 1374867929U, 1881075695U, 1833005680U, 2356761027U, 43277428U, 4102265096U, 1926599285U, 2012602526U, 1182759700U,
			1715155578U, 906503672U, 3454358509U, 2037796613U, 4258677245U, 1470026861U, 3576183161U, 1409149972U, 1690508439U, 4052037205U,
			2114619383U, 209237541U, 4016393322U, 1475346737U, 2445901352U, 1252030728U, 937886095U, 2770396309U, 356948177U, 2123696731U,
			2414816720U, 1404834112U, 3769482171U, 3490492641U, 2088542652U, 1501885802U, 1313641075U, 1617230680U, 75456327U, 3147527919U,
			2727096359U, 2157021931U, 933373916U, 2888744986U, 4095954525U, 2738073166U, 416737456U, 4069365438U, 157679389U, 2173450453U,
			882879106U, 3825981572U, 3054850402U, 1978584335U, 1458951883U, 2771043814U, 4163840065U, 2744648832U, 496026026U, 253091795U,
			1749036591U, 1235102341U, 137293847U, 2044213575U, 4091168001U, 1379381575U, 617889049U, 407312807U, 3402934985U, 2398522186U,
			1824293394U, 3993150679U, 2883462328U, 2504329468U, 3635317309U, 3549726203U, 503662053U, 946254477U, 1793158553U, 3487384332U,
			1040434805U, 585261543U, 743987892U, 761930731U, 3122918684U, 685139082U, 1881591920U, 2707753696U, 1326533362U, 3057794613U,
			141702902U, 3769204929U, 3384943909U, 1659492949U, 2139041686U, 4036891601U, 3443253474U, 2886636175U, 3781145343U, 2058920378U,
			2237431460U, 1293515080U, 1331112567U, 1515015005U, 1825068346U, 957526743U, 3252765649U, 746652160U, 3982288877U, 1197967170U,
			1918350094U, 3347200562U, 961501872U, 511156415U, 2312892357U, 1873189875U, 989424644U, 2833536191U, 1402221602U, 2457058692U,
			1667870876U, 4125016119U, 3069184956U, 1527446138U, 1496118408U, 460533388U, 1660694275U, 441450637U, 150304258U, 2286766999U,
			994486186U, 2941676118U, 2567195453U, 1177073459U, 1057116841U, 2162053604U, 3850489515U, 1838781830U, 1536484046U, 1377837159U,
			3246695727U, 4155628455U, 3752452634U, 3576630732U, 756533610U, 68289364U, 3690946296U, 3974121158U, 771346008U, 1739331685U,
			1782388579U, 2522241863U, 509717982U, 247321997U, 2667894012U, 1525889351U, 140658216U, 947534744U, 3252406063U, 3940028948U,
			834811501U, 2271632811U, 1636392590U, 2330029900U, 3139455175U, 2951364519U, 679476992U, 2841017144U, 2202637916U, 649133615U,
			590267500U, 1201881426U, 2628954263U, 2644673790U, 3472703401U, 2286972460U, 2243393427U, 338551647U, 2745283569U, 1626956676U,
			4247919078U, 2776208317U, 719844423U, 1249982160U, 267610501U, 1472574662U, 3016577462U, 1748568812U, 3959385541U, 2267253579U,
			1013103957U, 566720156U, 1144859239U, 1852685425U, 4119496352U, 3152743734U, 4031272355U, 770401578U, 2438563737U, 2904268222U,
			988811431U, 2109516824U, 2525092713U, 131388618U, 3724077769U, 3045050214U, 4036619174U, 650141388U, 3399633756U, 340038403U,
			2917806001U, 2316862007U, 2257635464U, 71495100U, 2395919017U, 2689646993U, 533092085U, 2419936310U, 474013804U, 363860387U,
			475625191U, 3684771816U, 867187226U, 4170384496U, 3597897383U, 1428513170U, 3254993499U, 1341176196U, 750235348U, 935603278U,
			1496588291U, 1454473387U, 929342490U, 50344786U, 1033966859U, 1381512410U, 1195595877U, 396611315U, 3822043999U, 3407300423U,
			1677617507U, 291327669U, 3018725881U, 1328181405U, 4211983962U, 1906842162U, 4013789633U, 1207701493U, 3296740747U, 1981564844U,
			63785967U, 3496916945U, 2270320486U, 1658765585U, 918900964U, 513830216U, 2726180610U, 659232301U, 1475806341U, 2084501972U,
			383318692U, 3840043553U, 1158375343U, 1094547444U, 1103068416U, 2134136020U, 2792782230U, 2392804653U, 33064497U, 656497369U,
			2594312544U, 71111716U, 3183723454U, 1855204473U, 3916274218U, 3081863330U, 3978344841U, 3355369540U, 275168946U, 1962108927U,
			1139149211U, 1816400305U, 1778138758U, 2449901973U, 1597840452U, 2070409183U, 2790784272U, 212266335U, 856010570U, 583157645U,
			2816405455U, 2663734620U, 718304668U, 1097707034U, 1270974769U, 1816310369U, 2671759261U, 2145416532U, 354277806U, 3112967372U,
			1861618699U, 1722805145U, 1164799136U, 2818769380U, 132202617U, 2219076884U, 1314130412U, 3467490480U, 2438965655U, 3555492813U,
			3662316271U, 4236432836U, 2854791495U, 3297850865U, 3713302571U, 3004022951U, 3746185865U, 3076625695U, 1063124595U, 2481872413U,
			2619182005U, 259275660U, 1568396732U, 3231798494U, 946129074U, 813464361U, 3337224591U, 254545595U, 2370603435U, 307670757U,
			1463970557U, 3832663992U, 3454881929U, 3309673137U, 3085503123U, 2767945243U, 921431177U, 2544426797U, 2943100934U, 2354421437U,
			379601488U, 2925833828U, 2719159545U, 3440191478U, 1532105727U, 804277288U, 1539600171U, 2015347867U, 2741537236U, 358183359U,
			1462180628U, 1178212872U, 2816776658U, 817821268U, 2525770110U, 4276980937U, 1425943046U, 1731582373U, 500660231U, 9610769U,
			1239115497U, 347410114U, 4238615669U, 2660797439U, 846005505U, 3653704856U, 3435894644U, 1698695060U, 1494646179U, 814395240U,
			2112447808U, 907072832U, 3315343732U, 4041668058U, 2275657483U, 88740289U, 2606124073U, 3957815442U, 3780241671U, 2895703724U,
			3244329539U, 1023435492U, 797848236U, 3421962449U, 1022520177U, 504890700U, 4158589697U, 364000620U, 894059726U, 1551477524U,
			3168836606U, 710137761U, 1496986742U, 2590648460U, 817107757U, 1035297219U, 2417824306U, 2824516887U, 2878106748U, 3137298080U,
			3408055697U, 678376455U, 489210305U, 1915292890U, 1489180181U, 3580952463U, 2342397694U, 1355206698U, 856554221U, 756153967U,
			4242616590U, 286757909U, 1227928571U, 1409623146U, 4082590171U, 3206330338U, 3666291689U, 1846296160U, 3190161673U, 4144503849U,
			2714832177U, 2517948544U, 2361502456U, 3954173926U, 2724470148U, 234117243U, 364222277U, 2254356086U, 692024833U, 2288794373U,
			4240926520U, 1861942254U, 2589636074U, 3583984291U, 1573954599U, 3291977279U, 3221973333U, 1342273771U, 3628064078U, 2746793409U,
			360046617U, 2543569952U, 506588978U, 1776979014U, 3874265905U, 2060059357U, 3837800825U, 3170494916U, 2883200817U, 2626487308U,
			1841340163U, 417314621U, 811733753U, 2381443230U, 3313952629U, 2949755375U, 2405767253U, 1884913240U, 3146578893U, 1074774851U,
			1248387253U, 993451526U, 3455218339U, 3401624938U, 830786535U, 833117934U, 3708699546U, 10045637U, 3312833552U, 3817409501U,
			4073917395U, 2485911738U, 879822068U, 4226006637U, 3628030622U, 1458897126U, 3343372646U, 1060793866U, 2647379668U, 615120730U,
			3343009801U, 353740483U, 1205538119U, 2036574612U, 2835848449U, 1170944077U, 3831632965U, 1446877680U, 1045793037U, 722064266U,
			2318044755U, 1505329766U, 1958622214U, 1494789960U, 470935303U, 3651325324U, 2623669913U, 415488464U, 828134365U, 2669185629U,
			3326659801U, 382722411U, 780635035U, 1998587849U, 2276828342U, 353213013U, 1983113179U, 3308757994U, 3918074076U, 2846174681U,
			3700136735U, 3415698062U, 1719527294U, 202101786U, 300304742U, 4224992022U, 3652021309U, 1359519352U, 3331022559U, 2493804008U,
			4039461233U, 667417631U, 1391722720U, 3622461893U, 2112503278U, 2602755779U, 1514022900U, 253043406U, 3408550503U, 1536824871U,
			2016064493U, 2388905284U, 3655748219U, 1940137164U, 3235336553U, 1206537145U, 220152116U, 1524167698U, 3341884435U, 494728659U,
			3752843004U, 2792767098U, 67795280U, 345620746U, 537432614U, 411624020U, 268729862U, 2250288880U, 714496142U, 957407100U,
			3423328377U, 2539437422U, 1779980444U, 1986636080U, 630913737U, 1736443919U, 3049859176U, 2632605568U, 3463140736U, 503136618U,
			690493247U, 931042653U, 1855903380U, 2643102870U, 993993520U, 3057986985U, 2076935759U, 3450979688U, 3077890574U, 612226537U,
			1257502524U, 4206630281U, 917271216U, 372025748U, 319152138U, 3098403853U, 3620708604U, 4095300370U, 3543758160U, 2467540683U,
			796179218U, 4168405310U, 1807325660U, 2514309814U, 3919641160U, 2215698222U, 4212425589U, 655045356U, 2554915126U, 1982471864U,
			2523293123U, 1676372969U, 1130371466U, 3748685262U, 3596057056U, 3952764008U, 801362852U, 1304062806U, 633840962U, 2532792975U,
			4036086498U, 522104755U, 2909112210U, 356902013U, 840647337U, 2564683452U, 837364535U, 61516401U, 3445502170U, 3655438001U,
			4213876147U, 3964107774U, 3459893918U, 3783901578U, 1233080771U, 978668142U, 1294617707U, 1066550699U, 220164001U, 3558931841U,
			3718580640U, 593396209U, 316907331U, 3719946658U, 3438047836U, 2841454455U, 3022763777U, 3104748536U, 1943316285U, 593586033U,
			1647100694U, 3154498183U, 891240735U, 1450098994U, 4008917664U, 2901672633U, 258748423U, 1350346846U, 464291958U, 1761827064U,
			3077182142U, 489113028U, 3738102032U, 2989414139U, 3801052701U, 2026510736U, 2381304388U, 2806189695U, 2922972590U, 1526249668U,
			2457309794U, 156929658U, 2012680761U, 4141297976U, 1911874917U, 2664297329U, 3131941038U, 1087523615U, 1501773413U, 2802826624U,
			4250320221U, 314901101U, 1562881085U, 3559224088U, 2551222470U, 1337687824U, 3200650012U, 2775415381U, 708443765U, 1059630535U,
			1331608394U, 3941076282U, 2661986159U, 3543575774U, 1936495913U, 2534209271U, 907164184U, 2226022055U, 440104706U, 44442112U,
			2812143924U, 1133988751U, 986081869U, 3555391079U, 4155717285U, 2187384081U, 3454101563U, 3533873610U, 1364807667U, 280681258U,
			3166609914U, 1683623057U, 727526845U, 2222908404U, 327079684U, 1157747311U, 3503588242U, 1373783258U, 1074941229U, 1142009101U,
			3764162378U, 2330681664U, 4194160338U, 2489675952U, 109593892U, 1206488229U, 3928930674U, 2701575101U, 2852818271U, 3994953411U,
			3773500003U, 2265757797U, 2595076359U, 657877713U, 3756877063U, 3845376960U, 4024021862U, 1737704237U, 14589801U, 540853912U,
			4036556961U, 2651335608U, 3502280874U, 4033277655U, 118862634U, 2198332557U, 3291100641U, 50593898U, 2551913294U, 1263477821U,
			2044913118U, 2906149874U, 614457110U, 2645587467U, 3159170798U, 129942340U, 1185727805U, 263472006U, 3963208781U, 1164493581U,
			932580859U, 2744692510U, 4115843127U, 222614005U, 3488175755U, 2630194955U, 1515137417U, 1495221945U, 3227501101U, 2313965640U,
			4169968541U, 2782036959U, 1444363885U, 1845835253U, 1098085924U, 1828878841U, 3431987597U, 2040565877U, 1261950279U, 2018570059U,
			3206534662U, 1094514820U, 1378186563U, 183497133U, 3345435216U, 2183154032U, 4053752881U, 2334018332U, 3384823325U, 2705125561U,
			3665455951U, 3330931102U, 3839417034U, 1288034422U, 1267190881U, 1901540737U, 1769582423U, 3383212433U, 1048246765U, 1461420592U,
			2487427172U, 4282756954U, 1034133467U, 1050063635U, 1363249590U, 767619423U, 2919234193U, 2186030173U, 2405558474U, 1613641437U,
			55858379U, 122844190U, 2563299470U, 1277766887U, 1365625551U, 2145304265U, 2272479488U, 4243599567U, 1851277067U, 3483837353U,
			1851390856U, 1503298823U, 149659752U, 4081816422U, 2346012596U, 1265627212U, 829908434U, 1665581901U, 2505810660U, 3236707241U,
			1326854238U, 2699411834U, 3204646564U, 2182767429U, 2788487274U, 2807003933U, 297472498U, 3651760708U, 3516238099U, 430657250U,
			1296633815U, 1738841084U, 29228891U, 2299191056U, 997366494U, 2405378657U, 4112004998U, 3815276101U, 3799080907U, 251101677U,
			2420013389U, 3982693234U, 369716696U, 3987396700U, 1533436786U, 1777720765U, 2799781928U, 3375984148U, 2133379176U, 2140596568U,
			1321766213U, 1304098535U, 394840561U, 2241484629U, 3116975025U, 3211552352U, 4122806975U, 2923546292U, 1557051840U, 2437051181U,
			2585685917U, 2253470561U, 660810549U, 1346035305U, 1368603333U, 620504928U, 2247868636U, 3095251860U, 3236276532U, 1692986728U,
			3061166870U, 2383598645U, 4243873915U, 1123468014U, 1642682448U, 1349069948U, 2946800350U, 1263166616U, 2450249257U, 3301993258U,
			1492121830U, 3577764363U, 183871550U, 2944688156U, 1212560023U, 2119786121U, 2748938697U, 3546310372U, 1053076131U, 4170488970U,
			3150913413U, 482230956U, 4261633434U, 2698550259U, 4226510214U, 3797275034U, 2543450486U, 364717907U, 3478895900U, 4122647766U,
			2232062894U, 374356197U, 2574317091U, 2783982061U, 202315401U, 2658728278U, 2486667902U, 3329044313U, 3448339126U, 1754203393U,
			1083056013U, 2267674102U, 2486484438U, 378815145U, 1493338669U, 54165770U, 306765505U, 2994470241U, 977815191U, 2996230355U,
			1209463336U, 2978474594U, 2688952825U, 2468872276U, 77734624U, 1204308488U, 671893400U, 2319373228U, 1680253096U, 3322369606U,
			2965920101U, 4262042739U, 1261497927U, 4260198567U, 3347748431U, 257368609U, 2994690349U, 3642407353U, 2609581489U, 1853705766U,
			4028477671U, 675024793U, 67473536U, 492847601U, 369639186U, 2510853432U, 393097224U, 4171213787U, 3136805253U, 3745704472U,
			2692225168U, 1973433458U, 2925815687U, 3492664387U, 2483078795U, 2885969894U, 3876324411U, 3803107785U, 4221960581U, 918229479U,
			3426474872U, 488470530U, 1796473350U, 2067804801U, 1049061967U, 257548468U, 1425627696U, 1125833906U, 4223485384U, 1598897148U,
			612987447U, 2818808485U, 2948174928U, 3085515589U, 1067184885U, 2059596627U, 1126933365U, 1205767704U, 644336800U, 3599717776U,
			498272760U, 1232101706U, 778570885U, 3293917850U, 1010446366U, 720970030U, 744257438U, 3921005957U, 3844333034U, 3843236671U,
			2995124404U, 2122512818U, 3440131874U, 2272300408U, 2735946327U, 3103960029U, 2222472840U, 610533195U, 1616736827U, 1428440735U,
			90706468U, 1317560396U, 1261342367U, 2248555526U, 3256503037U, 1306247053U, 1024556617U, 2739271512U, 1999329433U, 1582070317U,
			244934584U, 2934621429U, 2101467599U, 656713288U, 1013299688U, 3218160681U, 2208112064U, 1311576435U, 3597889174U, 1826642901U,
			4183734797U, 615384743U, 3682331598U, 854444559U, 1753323465U, 2383424528U, 551097559U, 3730044785U, 3283181060U, 964619705U,
			3207875570U, 836332253U, 4149163701U, 2640271757U, 2562192386U, 378706746U, 3542054474U, 3753430114U, 4042936137U, 56550249U,
			2109018051U, 395504547U, 3005491705U, 2409623817U, 3637217836U, 2340552678U, 740847594U, 3719452741U, 214794869U, 120157127U,
			351606464U, 695716578U, 4054505363U, 385504228U, 4163862201U, 2744455571U, 3618288544U, 2517103822U, 3336695622U, 3433969528U,
			777367137U, 446867295U, 1147561604U, 2128069066U, 2717718104U, 3608122366U, 2148084450U, 783016070U, 2277974707U, 3117267356U,
			1535697614U, 2460425537U, 744004615U, 3259393744U, 3561178268U, 2634009818U, 1765399246U, 1140285206U, 2899098798U, 2896371006U,
			3342748185U, 2031811174U, 4232100394U, 1801690685U, 3993281111U, 3613108984U, 2754455279U, 2643480541U, 855633627U, 266012595U,
			2781126270U, 2889101594U, 856406699U, 2596563076U, 1952281872U, 24642562U, 3198950273U, 376938041U, 761144399U, 3125543488U,
			988564539U, 1241863166U, 2572742078U, 2887498061U, 1093024416U, 3574015962U, 1522141830U, 2834287316U, 1931981638U, 1016868732U,
			81148139U, 3481543105U, 2685123076U, 1912507460U, 3784104848U, 3127637081U, 1508293886U, 55867720U, 3900147359U, 1570775630U,
			565593947U, 159768421U, 1610417289U, 2463798302U, 341138531U, 2145741837U, 1750250933U, 1193105055U, 1029002640U, 430316971U,
			3706393330U, 2371139784U, 1118597946U, 3395159363U, 2673299812U, 1393369650U, 4292895374U, 177024437U, 4225571578U, 2904801254U,
			755921161U, 2627923967U, 2140922369U, 3310807643U, 1033603334U, 4200266128U, 2964004806U, 67022363U, 736543618U, 3449392467U,
			1072299080U, 2194245433U, 1492404438U, 4206793380U, 317445323U, 1497160422U, 433844043U, 1350299702U, 2723043137U, 603848641U,
			322555448U, 1944875239U, 3350073967U, 2597395488U, 2144544081U, 4150576722U, 3128110230U, 4258261491U, 3164450109U, 4004847566U,
			3749385297U, 2800615161U, 1483908127U, 3603792642U, 1391374638U, 1635026362U, 3308323993U, 2970089722U, 2341328283U, 1045360987U,
			4036979053U, 1803349952U, 2611522960U, 3290414509U, 391730075U, 1324494192U, 4179113849U, 3185308735U, 3168359048U, 2386023156U,
			75114618U, 1116489436U, 3523747487U, 3902108378U, 1765785503U, 3768667140U, 1841039145U, 324436654U, 2255292317U, 31810397U,
			27623392U, 2935517924U, 2903284975U, 1665595470U, 1521541417U, 2113876183U, 4118415795U, 2223223837U, 3631573186U, 3147814365U,
			764470738U, 2933378764U, 3588603263U, 2477337827U, 2705475763U, 1228093630U, 1119435827U, 3359703388U, 3280062835U, 24392790U,
			1867855796U, 3331675420U, 3642698339U, 703453511U, 2635598450U, 1385945483U, 4067351431U, 1765455089U, 3925143981U, 565577442U,
			3647389962U, 57642113U, 3160638144U, 2247904242U, 2169158771U, 1069098150U, 1358781086U, 2657385591U, 1323802580U, 1502276064U,
			4244894014U, 1541875080U, 1639503873U, 2253541489U, 557983697U, 785308344U, 3113608674U, 1384455180U, 1576330506U, 572689639U,
			707338914U, 1872619731U, 2063650539U, 2682619084U, 2360273900U, 3452581668U, 2260706242U, 1763473080U, 2828476563U, 22717426U,
			1273156265U, 2560238524U, 308979017U, 2255651601U, 1070271713U, 3269926198U, 3799569312U, 1942178222U, 2006700137U, 2739572549U,
			3415393582U, 1271049573U, 3437216117U, 2451503186U, 2953169834U, 1826906232U, 296231911U, 1230065900U, 1004615353U, 2802597262U,
			4094627326U, 1275934567U, 4264767078U, 820082978U, 2621246236U, 295496850U, 798844609U, 3956997460U, 1820840081U, 1860426930U,
			2202242822U, 13342850U, 851603296U, 3098548048U, 2376581889U, 1159745987U, 672210625U, 3856348892U, 3456976732U, 1871812962U,
			2169101494U, 1062020365U, 2818439363U, 990377396U, 196829069U, 36114249U, 3671121841U, 155257395U, 709296543U, 3776714263U,
			1718946531U, 37666022U, 849171664U, 611300135U, 1809942394U, 12689158U, 4140681795U, 3082122070U, 3921276197U, 241192323U,
			1744555729U, 2879499015U, 1179144679U, 1883579840U, 3097323541U, 3874600108U, 4283158200U, 2553395209U, 2682214891U, 2141755813U,
			1823431718U, 3119823485U, 3145548374U, 3992930479U, 637766017U, 3909653318U, 2864903442U, 1629806695U, 813235705U, 418799213U,
			4283970981U, 1605139373U, 658378488U, 1083294612U, 1545082847U, 159470873U, 2680421766U, 736172930U, 119927109U, 473205076U,
			1854821624U, 1054086042U, 3791694954U, 2300139874U, 3408930797U, 2913092639U, 2668919562U, 1174071129U, 2507883613U, 2539225995U,
			3824473631U, 4282148590U, 3256603417U, 602310700U, 3787123421U, 2897813647U, 3483762276U, 2819969047U, 3468443836U, 4147635776U,
			3966955772U, 3094372121U, 3809850304U, 3752849273U, 185565187U, 4032692884U, 3981178804U, 3559404650U, 2248667521U, 1832915273U,
			2812707560U, 137701789U, 2174350178U, 730366328U, 4066341672U, 2166910705U, 2448533967U, 3880049914U, 1139721228U, 1599058980U,
			1788572002U, 1130967796U, 2321475978U, 1694651371U, 1373017852U, 3270636700U, 3848211772U, 897432808U, 3676960436U, 1865020258U,
			2331479855U, 253082316U, 496585546U, 673545111U, 2302042725U, 124975810U, 1779861958U, 396147986U, 835349572U, 1695068117U,
			2450461111U, 1777883461U, 1888869938U, 2907425588U, 1377612343U, 4266778549U, 882314481U, 1741312500U, 1754390618U, 1785176847U,
			3601586200U, 1706259641U, 348948891U, 211354221U, 2387705361U, 408666099U, 2492321141U, 3404787320U, 1316270995U, 1821931674U,
			1455731546U, 2944116431U, 4166747197U, 2790972352U, 1474340962U, 2597139596U, 4261989690U, 3193970003U, 794226751U, 3391602494U,
			15430086U, 2993546276U, 999607280U, 3794056383U, 1090666818U, 655296108U, 4287121794U, 2220317131U, 3187590086U, 3004454936U,
			2816879378U, 100852032U, 881705308U, 3699561635U, 622537901U, 1281950503U, 1574123891U, 2321433708U, 2544754460U, 2740692606U,
			1441083372U, 1994733177U, 3274128649U, 2655254495U, 2958308570U, 3260406688U, 1569579774U, 4232346964U, 1492690393U, 571472383U,
			1805331965U, 482733890U, 2031663698U, 153640785U, 3110902936U, 1475513760U, 1533533643U, 3481713719U, 4249461402U, 2141000580U,
			301644625U, 3959815782U, 918576590U, 2723261781U, 660653427U, 624313332U, 2829284835U, 1480872116U, 1567628866U, 4166949089U,
			388039983U, 58073196U, 2742540414U, 3127884751U, 3719037327U, 515258059U, 3272970121U, 429936195U, 3670509107U, 3773240522U,
			1355132991U, 3570272464U, 952809103U, 753062271U, 735030379U, 141309414U, 3882349696U, 139375994U, 3977728110U, 691897826U,
			1792666910U, 2299896536U, 2648564807U, 3175461778U, 3772159962U, 1607547061U, 3945102372U, 256899437U, 1623678278U, 732433885U,
			2678023642U, 1055882134U, 2948205501U, 124179268U, 971837819U, 1441375436U, 3995978578U, 2236774954U, 2228740973U, 2694783223U,
			4288363465U, 1304826070U, 3496140142U, 1916007637U, 1553196494U, 1048267211U, 4265742994U, 766664417U, 794384625U, 975951986U,
			1047015396U, 756938557U, 1162883963U, 341918683U, 2034942334U, 2100990531U, 3671446646U, 1517643447U, 1795721094U, 2000196695U,
			1664358214U, 85326937U, 4182238994U, 4060932453U, 2220356718U, 3971524885U, 654652616U, 2923553482U, 4261396426U, 3098579314U,
			3526908950U, 1166182025U, 3801619979U, 3207525868U, 2030264835U, 3790352379U, 3241094786U, 1163138912U, 2760528456U, 2826234256U,
			1039662315U, 2209925348U, 3949362933U, 3169003149U, 53223800U, 1400062570U, 398664881U, 1644895078U, 3082723524U, 3987618279U,
			2311391031U, 3885157115U, 229808971U, 937207607U, 3263267429U, 2222201854U, 3808840391U, 63944764U, 2511655236U, 4025138332U,
			3099239155U, 2195616593U, 1075069621U, 1910368209U, 471122360U, 821416380U, 3190143013U, 3525191913U, 4143519297U, 4284342060U,
			1750929707U, 3781790918U, 1969144300U, 3470425601U, 3539333255U, 3705409399U, 58482418U, 192163370U, 3709100922U, 244077101U,
			23830778U, 2637476122U, 1150770141U, 3908549007U, 1543273938U, 2732203342U, 1358786029U, 2315156953U, 2427359708U, 3176627866U,
			2652930769U, 3774572199U, 4090706289U, 1453085220U, 3496103819U, 2862933992U, 2577803867U, 1899554983U, 3506949031U, 2357352789U,
			985076444U, 4237564471U, 2410464675U, 1332661106U, 1139618838U, 129773096U, 178269259U, 1842892068U, 3063777144U, 2710286112U,
			2401516910U, 2295692924U, 1487974984U, 3467722817U, 3312361154U, 1660103573U, 2358538253U, 1766902367U, 2024959622U, 3776973506U,
			4185266156U, 1936567791U, 2613079325U, 1826077587U, 793425777U, 3585971310U, 1509218619U, 3874427159U, 1231146290U, 2314177393U,
			4024377607U, 3655857749U, 2004033180U, 4256208139U, 3684041911U, 1133299488U, 3513876674U, 198351942U, 4005710322U, 3237692647U,
			2798311358U, 3235087380U, 3573696356U, 2653460736U, 1970063284U, 658261663U, 2378395505U, 1333914195U, 2379841849U, 3560961676U,
			128399637U, 1534275623U, 333931033U, 770109346U, 343148287U, 3195057355U, 2864183477U, 70648401U, 1789421129U, 4039205229U,
			4250347916U, 884967323U, 245929819U, 2686135247U, 3242240784U, 3249263317U, 2719911295U, 1414704089U, 770616511U, 2825439659U,
			3107574567U, 1407036166U, 4240456280U, 4226188353U, 2251342012U, 1121170339U, 1792513761U, 2467586675U, 3909851214U, 2531006204U,
			1549652346U, 3612457213U, 3243280950U, 3709037691U, 4166937005U, 921080373U, 3107574683U, 1407036166U, 4240456280U, 4226188353U,
			2251342012U, 1121170339U, 1792513761U, 2467586675U, 3909851214U, 2531006204U
		};
		uint[] array2 = new uint[16];
		uint num2 = 3255138275U;
		for (int i = 0; i < 16; i++)
		{
			num2 ^= num2 >> 12;
			num2 ^= num2 << 25;
			num2 ^= num2 >> 27;
			array2[i] = num2;
		}
		int num3 = 0;
		int num4 = 0;
		uint[] array3 = new uint[16];
		byte[] array4 = new byte[num * 4U];
		while ((long)num3 < (long)((ulong)num))
		{
			for (int j = 0; j < 16; j++)
			{
				array3[j] = array[num3 + j];
			}
			array3[0] = array3[0] ^ array2[0];
			array3[1] = array3[1] ^ array2[1];
			array3[2] = array3[2] ^ array2[2];
			array3[3] = array3[3] ^ array2[3];
			array3[4] = array3[4] ^ array2[4];
			array3[5] = array3[5] ^ array2[5];
			array3[6] = array3[6] ^ array2[6];
			array3[7] = array3[7] ^ array2[7];
			array3[8] = array3[8] ^ array2[8];
			array3[9] = array3[9] ^ array2[9];
			array3[10] = array3[10] ^ array2[10];
			array3[11] = array3[11] ^ array2[11];
			array3[12] = array3[12] ^ array2[12];
			array3[13] = array3[13] ^ array2[13];
			array3[14] = array3[14] ^ array2[14];
			array3[15] = array3[15] ^ array2[15];
			for (int k = 0; k < 16; k++)
			{
				uint num5 = array3[k];
				array4[num4++] = (byte)num5;
				array4[num4++] = (byte)(num5 >> 8);
				array4[num4++] = (byte)(num5 >> 16);
				array4[num4++] = (byte)(num5 >> 24);
				array2[k] ^= num5;
			}
			num3 += 16;
		}
		<Module>.byte_0 = <Module>.smethod_1(array4);
		Module module = typeof(<Module>).Module;
		byte* ptr = (byte*)(void*)Marshal.GetHINSTANCE(module);
		byte* ptr2 = ptr + 60;
		ptr2 = ptr + *(uint*)ptr2;
		ptr2 += 6;
		ushort num6 = *(ushort*)ptr2;
		ptr2 += 14;
		ushort num7 = *(ushort*)ptr2;
		ptr2 = ptr2 + 4 + num7;
		byte* ptr3 = stackalloc byte[(UIntPtr)11];
		MethodInfo method;
		if (module.FullyQualifiedName[0] == '<')
		{
			uint num8 = *(uint*)(ptr2 - 16);
			uint num9 = *(uint*)(ptr2 - 120);
			uint[] array5 = new uint[(int)num6];
			uint[] array6 = new uint[(int)num6];
			uint[] array7 = new uint[(int)num6];
			for (int l = 0; l < (int)num6; l++)
			{
				<Module>.VirtualProtect(ptr2, 8, 64U, out method);
				Marshal.Copy(new byte[8], 0, (IntPtr)((void*)ptr2), 8);
				array5[l] = *(uint*)(ptr2 + 12);
				array6[l] = *(uint*)(ptr2 + 8);
				array7[l] = *(uint*)(ptr2 + 20);
				ptr2 += 40;
			}
			if (num9 != 0U)
			{
				for (int m = 0; m < (int)num6; m++)
				{
					if (array5[m] <= num9 && num9 < array5[m] + array6[m])
					{
						num9 = num9 - array5[m] + array7[m];
						IL_331:
						byte* ptr4 = ptr + num9;
						uint num10 = *(uint*)ptr4;
						for (int n = 0; n < (int)num6; n++)
						{
							if (array5[n] <= num10 && num10 < array5[n] + array6[n])
							{
								num10 = num10 - array5[n] + array7[n];
								IL_378:
								byte* ptr5 = ptr + num10;
								uint num11 = *(uint*)(ptr4 + 12);
								for (int num12 = 0; num12 < (int)num6; num12++)
								{
									if (array5[num12] <= num11 && num11 < array5[num12] + array6[num12])
									{
										num11 = num11 - array5[num12] + array7[num12];
										break;
									}
								}
								uint num13 = *(uint*)ptr5 + 2U;
								for (int num14 = 0; num14 < (int)num6; num14++)
								{
									if (array5[num14] <= num13 && num13 < array5[num14] + array6[num14])
									{
										num13 = num13 - array5[num14] + array7[num14];
										IL_404:
										<Module>.VirtualProtect(ptr + num11, 11, 64U, out method);
										*(int*)ptr3 = 1818522734;
										*(int*)(ptr3 + 4) = 1818504812;
										*(short*)(ptr3 + (IntPtr)4 * 2) = 108;
										ptr3[10] = 0;
										for (int num15 = 0; num15 < 11; num15++)
										{
											(ptr + num11)[num15] = ptr3[num15];
										}
										<Module>.VirtualProtect(ptr + num13, 11, 64U, out method);
										*(int*)ptr3 = 1866691662;
										*(int*)(ptr3 + 4) = 1852404846;
										*(short*)(ptr3 + (IntPtr)4 * 2) = 25973;
										ptr3[10] = 0;
										for (int num16 = 0; num16 < 11; num16++)
										{
											(ptr + num13)[num16] = ptr3[num16];
										}
										goto IL_4AF;
									}
								}
								goto IL_404;
							}
						}
						goto IL_378;
					}
				}
				goto IL_331;
			}
			IL_4AF:
			for (int num17 = 0; num17 < (int)num6; num17++)
			{
				if (array5[num17] <= num8 && num8 < array5[num17] + array6[num17])
				{
					num8 = num8 - array5[num17] + array7[num17];
					IL_4EA:
					byte* ptr6 = ptr + num8;
					<Module>.VirtualProtect(ptr6, 72, 64U, out method);
					uint num18 = *(uint*)(ptr6 + 8);
					for (int num19 = 0; num19 < (int)num6; num19++)
					{
						if (array5[num19] <= num18 && num18 < array5[num19] + array6[num19])
						{
							num18 = num18 - array5[num19] + array7[num19];
							break;
						}
					}
					*(int*)ptr6 = 0;
					*(int*)(ptr6 + 4) = 0;
					*(int*)(ptr6 + (IntPtr)2 * 4) = 0;
					*(int*)(ptr6 + (IntPtr)3 * 4) = 0;
					byte* ptr7 = ptr + num18;
					<Module>.VirtualProtect(ptr7, 4, 64U, out method);
					*(int*)ptr7 = 0;
					ptr7 += 12;
					ptr7 += *(uint*)ptr7;
					ptr7 = (ptr7 + 7L) & -4L;
					ptr7 += 2;
					ushort num20 = (ushort)(*ptr7);
					ptr7 += 2;
					int num21 = 0;
					IL_643:
					while (num21 < (int)num20)
					{
						<Module>.VirtualProtect(ptr7, 8, 64U, out method);
						ptr7 += 4;
						ptr7 += 4;
						int num22 = 0;
						while (num22 < 8)
						{
							<Module>.VirtualProtect(ptr7, 4, 64U, out method);
							*ptr7 = 0;
							ptr7++;
							if (*ptr7 != 0)
							{
								*ptr7 = 0;
								ptr7++;
								if (*ptr7 != 0)
								{
									*ptr7 = 0;
									ptr7++;
									if (*ptr7 != 0)
									{
										*ptr7 = 0;
										ptr7++;
										num22++;
										continue;
									}
									ptr7++;
								}
								else
								{
									ptr7 += 2;
								}
							}
							else
							{
								ptr7 += 3;
							}
							IL_63D:
							num21++;
							goto IL_643;
						}
						goto IL_63D;
					}
					goto IL_883;
				}
			}
			goto IL_4EA;
		}
		byte* ptr8 = ptr + *(uint*)(ptr2 - 16);
		if (*(uint*)(ptr2 - 120) != 0U)
		{
			byte* ptr9 = ptr + *(uint*)(ptr2 - 120);
			byte* ptr10 = ptr + *(uint*)ptr9;
			byte* ptr11 = ptr + *(uint*)(ptr9 + 12);
			byte* ptr12 = ptr + *(uint*)ptr10 + 2;
			<Module>.VirtualProtect(ptr11, 11, 64U, out method);
			*(int*)ptr3 = 1818522734;
			*(int*)(ptr3 + 4) = 1818504812;
			*(short*)(ptr3 + (IntPtr)4 * 2) = 108;
			ptr3[10] = 0;
			for (int num23 = 0; num23 < 11; num23++)
			{
				ptr11[num23] = ptr3[num23];
			}
			<Module>.VirtualProtect(ptr12, 11, 64U, out method);
			*(int*)ptr3 = 1866691662;
			*(int*)(ptr3 + 4) = 1852404846;
			*(short*)(ptr3 + (IntPtr)4 * 2) = 25973;
			ptr3[10] = 0;
			for (int num24 = 0; num24 < 11; num24++)
			{
				ptr12[num24] = ptr3[num24];
			}
		}
		for (int num25 = 0; num25 < (int)num6; num25++)
		{
			<Module>.VirtualProtect(ptr2, 8, 64U, out method);
			Marshal.Copy(new byte[8], 0, (IntPtr)((void*)ptr2), 8);
			ptr2 += 40;
		}
		<Module>.VirtualProtect(ptr8, 72, 64U, out method);
		byte* ptr13 = ptr + *(uint*)(ptr8 + 8);
		*(int*)ptr8 = 0;
		*(int*)(ptr8 + 4) = 0;
		*(int*)(ptr8 + (IntPtr)2 * 4) = 0;
		*(int*)(ptr8 + (IntPtr)3 * 4) = 0;
		<Module>.VirtualProtect(ptr13, 4, 64U, out method);
		*(int*)ptr13 = 0;
		ptr13 += 12;
		ptr13 += *(uint*)ptr13;
		ptr13 = (ptr13 + 7L) & -4L;
		ptr13 += 2;
		ushort num26 = (ushort)(*ptr13);
		ptr13 += 2;
		for (int num27 = 0; num27 < (int)num26; num27++)
		{
			<Module>.VirtualProtect(ptr13, 8, 64U, out method);
			ptr13 += 4;
			ptr13 += 4;
			for (int num28 = 0; num28 < 8; num28++)
			{
				<Module>.VirtualProtect(ptr13, 4, 64U, out method);
				*ptr13 = 0;
				ptr13++;
				if (*ptr13 == 0)
				{
					ptr13 += 3;
					break;
				}
				*ptr13 = 0;
				ptr13++;
				if (*ptr13 == 0)
				{
					ptr13 += 2;
					break;
				}
				*ptr13 = 0;
				ptr13++;
				if (*ptr13 == 0)
				{
					ptr13++;
					break;
				}
				*ptr13 = 0;
				ptr13++;
			}
		}
		IL_883:
		method = typeof(Environment).GetMethod("GetEnvironmentVariable", new Type[] { typeof(string) });
		if (method != null && "1".Equals(method.Invoke(null, new object[] { "COR_ENABLE_PROFILING" })))
		{
			Environment.FailFast(null);
		}
		new Thread(new ParameterizedThreadStart(<Module>.smethod_0))
		{
			IsBackground = true
		}.Start(null);
	}

	// Token: 0x06000002 RID: 2 RVA: 0x00004810 File Offset: 0x00002A10
	private static void smethod_0(object thread)
	{
		Thread thread2 = thread as Thread;
		if (thread2 == null)
		{
			thread2 = new Thread(new ParameterizedThreadStart(<Module>.smethod_0));
			thread2.IsBackground = true;
			thread2.Start(Thread.CurrentThread);
			Thread.Sleep(500);
		}
		for (;;)
		{
			if (Debugger.IsAttached)
			{
				goto IL_41;
			}
			if (Debugger.IsLogging())
			{
				goto IL_41;
			}
			IL_47:
			if (!thread2.IsAlive)
			{
				Environment.FailFast(null);
			}
			Thread.Sleep(1000);
			continue;
			IL_41:
			Environment.FailFast(null);
			goto IL_47;
		}
	}

	// Token: 0x06000003 RID: 3
	[DllImport("kernel32.dll")]
	internal unsafe static extern bool VirtualProtect(byte* lpAddress, int dwSize, uint flNewProtect, out uint lpflOldProtect);

	// Token: 0x06000004 RID: 4 RVA: 0x00004884 File Offset: 0x00002A84
	internal static byte[] smethod_1(byte[] data)
	{
		MemoryStream memoryStream = new MemoryStream(data);
		<Module>.Class1 @class = new <Module>.Class1();
		byte[] array = new byte[5];
		for (int i = 0; i < 5; i += memoryStream.Read(array, i, 5 - i))
		{
		}
		@class.method_5(array);
		for (int i = 0; i < 4; i += memoryStream.Read(array, i, 4 - i))
		{
		}
		if (!BitConverter.IsLittleEndian)
		{
			Array.Reverse(array, 0, 4);
		}
		int num = BitConverter.ToInt32(array, 0);
		byte[] array2 = new byte[num];
		MemoryStream memoryStream2 = new MemoryStream(array2, true);
		long num2 = memoryStream.Length - 5L - 4L;
		@class.method_4(memoryStream, memoryStream2, num2, (long)num);
		return array2;
	}

	// Token: 0x06000005 RID: 5 RVA: 0x0000492C File Offset: 0x00002B2C
	internal static T smethod_2<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetExecutingAssembly()))
		{
			id = (id * 1281352775) ^ 1213119473;
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T t;
			if (num != 3)
			{
				if (num == 2)
				{
					T[] array = new T[1];
					Buffer.BlockCopy(<Module>.byte_0, id, array, 0, sizeof(T));
					t = array[0];
				}
				else if (num == 1)
				{
					int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
					int num3 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
					Array array2 = Array.CreateInstance(typeof(T).GetElementType(), num3);
					Buffer.BlockCopy(<Module>.byte_0, id + 8, array2, 0, num2 - 4);
					t = (T)((object)array2);
				}
				else
				{
					t = default(T);
				}
			}
			else
			{
				int num4 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
				t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num4)));
			}
			return t;
		}
		return default(T);
	}

	// Token: 0x06000006 RID: 6 RVA: 0x00004AA0 File Offset: 0x00002CA0
	internal static T smethod_3<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetExecutingAssembly()))
		{
			id = (id * -1344935169) ^ 1410950739;
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T t;
			if (num == 0)
			{
				int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
				t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num2)));
			}
			else if (num == 1)
			{
				T[] array = new T[1];
				Buffer.BlockCopy(<Module>.byte_0, id, array, 0, sizeof(T));
				t = array[0];
			}
			else if (num != 2)
			{
				t = default(T);
			}
			else
			{
				int num3 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
				int num4 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
				Array array2 = Array.CreateInstance(typeof(T).GetElementType(), num4);
				Buffer.BlockCopy(<Module>.byte_0, id + 8, array2, 0, num3 - 4);
				t = (T)((object)array2);
			}
			return t;
		}
		return default(T);
	}

	// Token: 0x06000007 RID: 7 RVA: 0x00004C14 File Offset: 0x00002E14
	internal static T smethod_4<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetExecutingAssembly()))
		{
			id = (id * 1442566415) ^ -1034360467;
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T t;
			if (num == 0)
			{
				int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
				t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num2)));
			}
			else if (num != 1)
			{
				if (num == 3)
				{
					int num3 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
					int num4 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
					Array array = Array.CreateInstance(typeof(T).GetElementType(), num4);
					Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num3 - 4);
					t = (T)((object)array);
				}
				else
				{
					t = default(T);
				}
			}
			else
			{
				T[] array2 = new T[1];
				Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
				t = array2[0];
			}
			return t;
		}
		return default(T);
	}

	// Token: 0x06000008 RID: 8 RVA: 0x00004D88 File Offset: 0x00002F88
	internal static T smethod_5<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetExecutingAssembly()))
		{
			id = (id * 1820928467) ^ -1446656561;
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T t;
			if (num != 0)
			{
				if (num != 3)
				{
					if (num != 1)
					{
						t = default(T);
					}
					else
					{
						int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
						int num3 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
						Array array = Array.CreateInstance(typeof(T).GetElementType(), num3);
						Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num2 - 4);
						t = (T)((object)array);
					}
				}
				else
				{
					T[] array2 = new T[1];
					Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
					t = array2[0];
				}
			}
			else
			{
				int num4 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
				t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num4)));
			}
			return t;
		}
		return default(T);
	}

	// Token: 0x06000009 RID: 9 RVA: 0x00004EFC File Offset: 0x000030FC
	internal static T smethod_6<T>(int id)
	{
		if (Assembly.GetExecutingAssembly().Equals(Assembly.GetExecutingAssembly()))
		{
			id = (id * -1109194125) ^ 2093394658;
			int num = (int)((uint)id >> 30);
			id = (id & 1073741823) << 2;
			T t;
			if (num != 3)
			{
				if (num != 1)
				{
					if (num != 0)
					{
						t = default(T);
					}
					else
					{
						int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
						int num3 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
						Array array = Array.CreateInstance(typeof(T).GetElementType(), num3);
						Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num2 - 4);
						t = (T)((object)array);
					}
				}
				else
				{
					T[] array2 = new T[1];
					Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
					t = array2[0];
				}
			}
			else
			{
				int num4 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
				t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num4)));
			}
			return t;
		}
		return default(T);
	}

	// Token: 0x0600000A RID: 10 RVA: 0x00005070 File Offset: 0x00003270
	internal static Assembly smethod_7(object sender, ResolveEventArgs args)
	{
		if (Array.IndexOf<string>(<Module>.assembly_0.GetManifestResourceNames(), args.Name) != -1)
		{
			return <Module>.assembly_0;
		}
		return null;
	}

	// Token: 0x04000001 RID: 1
	internal static byte[] byte_0;

	// Token: 0x04000002 RID: 2 RVA: 0x00002050 File Offset: 0x00000250
	// Note: this field is marked with 'hasfieldrva'.
	internal static <Module>.Struct4 struct4_0;

	// Token: 0x04000003 RID: 3
	internal static Assembly assembly_0;

	// Token: 0x04000004 RID: 4 RVA: 0x00003D50 File Offset: 0x00001F50
	// Note: this field is marked with 'hasfieldrva'.
	internal static <Module>.Struct5 struct5_0;

	// Token: 0x02000002 RID: 2
	internal struct Struct0
	{
		// Token: 0x0600000B RID: 11 RVA: 0x0000509C File Offset: 0x0000329C
		internal void method_0()
		{
			this.uint_0 = 1024U;
		}

		// Token: 0x0600000C RID: 12 RVA: 0x000050B4 File Offset: 0x000032B4
		internal uint method_1(<Module>.Class0 rangeDecoder)
		{
			uint num = (rangeDecoder.uint_1 >> 11) * this.uint_0;
			if (rangeDecoder.uint_0 < num)
			{
				rangeDecoder.uint_1 = num;
				this.uint_0 += 2048U - this.uint_0 >> 5;
				if (rangeDecoder.uint_1 < 16777216U)
				{
					rangeDecoder.uint_0 = (rangeDecoder.uint_0 << 8) | (uint)((byte)rangeDecoder.stream_0.ReadByte());
					rangeDecoder.uint_1 <<= 8;
				}
				return 0U;
			}
			rangeDecoder.uint_1 -= num;
			rangeDecoder.uint_0 -= num;
			this.uint_0 -= this.uint_0 >> 5;
			if (rangeDecoder.uint_1 < 16777216U)
			{
				rangeDecoder.uint_0 = (rangeDecoder.uint_0 << 8) | (uint)((byte)rangeDecoder.stream_0.ReadByte());
				rangeDecoder.uint_1 <<= 8;
			}
			return 1U;
		}

		// Token: 0x04000005 RID: 5
		internal uint uint_0;
	}

	// Token: 0x02000003 RID: 3
	internal struct Struct1
	{
		// Token: 0x0600000D RID: 13 RVA: 0x000051A0 File Offset: 0x000033A0
		internal Struct1(int numBitLevels)
		{
			this.int_0 = numBitLevels;
			this.struct0_0 = new <Module>.Struct0[1 << numBitLevels];
		}

		// Token: 0x0600000E RID: 14 RVA: 0x000051C8 File Offset: 0x000033C8
		internal void method_0()
		{
			uint num = 1U;
			while ((ulong)num < (ulong)(1L << (this.int_0 & 31)))
			{
				this.struct0_0[(int)num].method_0();
				num += 1U;
			}
		}

		// Token: 0x0600000F RID: 15 RVA: 0x00005200 File Offset: 0x00003400
		internal uint method_1(<Module>.Class0 rangeDecoder)
		{
			uint num = 1U;
			for (int i = this.int_0; i > 0; i--)
			{
				num = (num << 1) + this.struct0_0[(int)num].method_1(rangeDecoder);
			}
			return num - (1U << this.int_0);
		}

		// Token: 0x06000010 RID: 16 RVA: 0x00005244 File Offset: 0x00003444
		internal uint method_2(<Module>.Class0 rangeDecoder)
		{
			uint num = 1U;
			uint num2 = 0U;
			for (int i = 0; i < this.int_0; i++)
			{
				uint num3 = this.struct0_0[(int)num].method_1(rangeDecoder);
				num <<= 1;
				num += num3;
				num2 |= num3 << i;
			}
			return num2;
		}

		// Token: 0x06000011 RID: 17 RVA: 0x0000528C File Offset: 0x0000348C
		internal static uint smethod_0(<Module>.Struct0[] Models, uint startIndex, <Module>.Class0 rangeDecoder, int NumBitLevels)
		{
			uint num = 1U;
			uint num2 = 0U;
			for (int i = 0; i < NumBitLevels; i++)
			{
				uint num3 = Models[(int)(startIndex + num)].method_1(rangeDecoder);
				num <<= 1;
				num += num3;
				num2 |= num3 << i;
			}
			return num2;
		}

		// Token: 0x04000006 RID: 6
		internal readonly <Module>.Struct0[] struct0_0;

		// Token: 0x04000007 RID: 7
		internal readonly int int_0;
	}

	// Token: 0x02000004 RID: 4
	internal class Class0
	{
		// Token: 0x06000012 RID: 18 RVA: 0x000052CC File Offset: 0x000034CC
		internal void method_0(Stream stream)
		{
			this.stream_0 = stream;
			this.uint_0 = 0U;
			this.uint_1 = uint.MaxValue;
			for (int i = 0; i < 5; i++)
			{
				this.uint_0 = (this.uint_0 << 8) | (uint)((byte)this.stream_0.ReadByte());
			}
		}

		// Token: 0x06000013 RID: 19 RVA: 0x00005318 File Offset: 0x00003518
		internal void method_1()
		{
			this.stream_0 = null;
		}

		// Token: 0x06000014 RID: 20 RVA: 0x0000532C File Offset: 0x0000352C
		internal void method_2()
		{
			while (this.uint_1 < 16777216U)
			{
				this.uint_0 = (this.uint_0 << 8) | (uint)((byte)this.stream_0.ReadByte());
				this.uint_1 <<= 8;
			}
		}

		// Token: 0x06000015 RID: 21 RVA: 0x00005374 File Offset: 0x00003574
		internal uint method_3(int numTotalBits)
		{
			uint num = this.uint_1;
			uint num2 = this.uint_0;
			uint num3 = 0U;
			for (int i = numTotalBits; i > 0; i--)
			{
				num >>= 1;
				uint num4 = num2 - num >> 31;
				num2 -= num & (num4 - 1U);
				num3 = (num3 << 1) | (1U - num4);
				if (num < 16777216U)
				{
					num2 = (num2 << 8) | (uint)((byte)this.stream_0.ReadByte());
					num <<= 8;
				}
			}
			this.uint_1 = num;
			this.uint_0 = num2;
			return num3;
		}

		// Token: 0x06000016 RID: 22 RVA: 0x000053E8 File Offset: 0x000035E8
		internal Class0()
		{
		}

		// Token: 0x04000008 RID: 8
		internal uint uint_0;

		// Token: 0x04000009 RID: 9
		internal uint uint_1;

		// Token: 0x0400000A RID: 10
		internal Stream stream_0;
	}

	// Token: 0x02000005 RID: 5
	internal class Class1
	{
		// Token: 0x06000017 RID: 23 RVA: 0x000053FC File Offset: 0x000035FC
		internal Class1()
		{
			this.uint_0 = uint.MaxValue;
			int num = 0;
			while ((long)num < 4L)
			{
				this.struct1_0[num] = new <Module>.Struct1(6);
				num++;
			}
		}

		// Token: 0x06000018 RID: 24 RVA: 0x000054F0 File Offset: 0x000036F0
		internal void method_0(uint dictionarySize)
		{
			if (this.uint_0 != dictionarySize)
			{
				this.uint_0 = dictionarySize;
				this.uint_1 = Math.Max(this.uint_0, 1U);
				uint num = Math.Max(this.uint_1, 4096U);
				this.class4_0.method_0(num);
			}
		}

		// Token: 0x06000019 RID: 25 RVA: 0x0000553C File Offset: 0x0000373C
		internal void method_1(int lp, int lc)
		{
			this.class3_0.method_0(lp, lc);
		}

		// Token: 0x0600001A RID: 26 RVA: 0x00005558 File Offset: 0x00003758
		internal void method_2(int pb)
		{
			uint num = 1U << pb;
			this.class2_0.method_0(num);
			this.class2_1.method_0(num);
			this.uint_2 = num - 1U;
		}

		// Token: 0x0600001B RID: 27 RVA: 0x00005590 File Offset: 0x00003790
		internal void method_3(Stream inStream, Stream outStream)
		{
			this.class0_0.method_0(inStream);
			this.class4_0.method_1(outStream, this.bool_0);
			for (uint num = 0U; num < 12U; num += 1U)
			{
				for (uint num2 = 0U; num2 <= this.uint_2; num2 += 1U)
				{
					uint num3 = (num << 4) + num2;
					this.struct0_0[(int)num3].method_0();
					this.struct0_1[(int)num3].method_0();
				}
				this.struct0_2[(int)num].method_0();
				this.struct0_3[(int)num].method_0();
				this.struct0_4[(int)num].method_0();
				this.struct0_5[(int)num].method_0();
			}
			this.class3_0.method_1();
			for (uint num = 0U; num < 4U; num += 1U)
			{
				this.struct1_0[(int)num].method_0();
			}
			for (uint num = 0U; num < 114U; num += 1U)
			{
				this.struct0_6[(int)num].method_0();
			}
			this.class2_0.method_1();
			this.class2_1.method_1();
			this.struct1_1.method_0();
		}

		// Token: 0x0600001C RID: 28 RVA: 0x000056B4 File Offset: 0x000038B4
		internal void method_4(Stream inStream, Stream outStream, long inSize, long outSize)
		{
			this.method_3(inStream, outStream);
			<Module>.Struct3 @struct = default(<Module>.Struct3);
			@struct.method_0();
			uint num = 0U;
			uint num2 = 0U;
			uint num3 = 0U;
			uint num4 = 0U;
			ulong num5 = 0UL;
			if (0L < outSize)
			{
				this.struct0_0[(int)((int)@struct.uint_0 << 4)].method_1(this.class0_0);
				@struct.method_1();
				byte b = this.class3_0.method_3(this.class0_0, 0U, 0);
				this.class4_0.method_5(b);
				num5 += 1UL;
			}
			while (num5 < (ulong)outSize)
			{
				uint num6 = (uint)num5 & this.uint_2;
				if (this.struct0_0[(int)((@struct.uint_0 << 4) + num6)].method_1(this.class0_0) == 0U)
				{
					byte b2 = this.class4_0.method_6(0U);
					byte b3;
					if (!@struct.method_5())
					{
						b3 = this.class3_0.method_4(this.class0_0, (uint)num5, b2, this.class4_0.method_6(num));
					}
					else
					{
						b3 = this.class3_0.method_3(this.class0_0, (uint)num5, b2);
					}
					this.class4_0.method_5(b3);
					@struct.method_1();
					num5 += 1UL;
				}
				else
				{
					uint num8;
					if (this.struct0_2[(int)@struct.uint_0].method_1(this.class0_0) == 1U)
					{
						if (this.struct0_3[(int)@struct.uint_0].method_1(this.class0_0) != 0U)
						{
							uint num7;
							if (this.struct0_4[(int)@struct.uint_0].method_1(this.class0_0) == 0U)
							{
								num7 = num2;
							}
							else
							{
								if (this.struct0_5[(int)@struct.uint_0].method_1(this.class0_0) == 0U)
								{
									num7 = num3;
								}
								else
								{
									num7 = num4;
									num4 = num3;
								}
								num3 = num2;
							}
							num2 = num;
							num = num7;
						}
						else if (this.struct0_1[(int)((@struct.uint_0 << 4) + num6)].method_1(this.class0_0) == 0U)
						{
							@struct.method_4();
							this.class4_0.method_5(this.class4_0.method_6(num));
							num5 += 1UL;
							continue;
						}
						num8 = this.class2_1.method_2(this.class0_0, num6) + 2U;
						@struct.method_3();
					}
					else
					{
						num4 = num3;
						num3 = num2;
						num2 = num;
						num8 = 2U + this.class2_0.method_2(this.class0_0, num6);
						@struct.method_2();
						uint num9 = this.struct1_0[(int)<Module>.Class1.smethod_0(num8)].method_1(this.class0_0);
						if (num9 >= 4U)
						{
							int num10 = (int)((num9 >> 1) - 1U);
							num = (2U | (num9 & 1U)) << num10;
							if (num9 < 14U)
							{
								num += <Module>.Struct1.smethod_0(this.struct0_6, num - num9 - 1U, this.class0_0, num10);
							}
							else
							{
								num += this.class0_0.method_3(num10 - 4) << 4;
								num += this.struct1_1.method_2(this.class0_0);
							}
						}
						else
						{
							num = num9;
						}
					}
					if (((ulong)num >= num5 || num >= this.uint_1) && num == 4294967295U)
					{
						break;
					}
					this.class4_0.method_4(num, num8);
					num5 += (ulong)num8;
				}
			}
			this.class4_0.method_3();
			this.class4_0.method_2();
			this.class0_0.method_1();
		}

		// Token: 0x0600001D RID: 29 RVA: 0x00005A18 File Offset: 0x00003C18
		internal void method_5(byte[] properties)
		{
			int num = (int)(properties[0] % 9);
			byte b = properties[0] / 9;
			int num2 = (int)(b % 5);
			int num3 = (int)(b / 5);
			uint num4 = 0U;
			for (int i = 0; i < 4; i++)
			{
				num4 += (uint)((uint)properties[1 + i] << i * 8);
			}
			this.method_0(num4);
			this.method_1(num2, num);
			this.method_2(num3);
		}

		// Token: 0x0600001E RID: 30 RVA: 0x00005A74 File Offset: 0x00003C74
		internal static uint smethod_0(uint len)
		{
			len -= 2U;
			if (len < 4U)
			{
				return len;
			}
			return 3U;
		}

		// Token: 0x0400000B RID: 11
		internal readonly <Module>.Struct0[] struct0_0 = new <Module>.Struct0[192];

		// Token: 0x0400000C RID: 12
		internal readonly <Module>.Struct0[] struct0_1 = new <Module>.Struct0[192];

		// Token: 0x0400000D RID: 13
		internal readonly <Module>.Struct0[] struct0_2 = new <Module>.Struct0[12];

		// Token: 0x0400000E RID: 14
		internal readonly <Module>.Struct0[] struct0_3 = new <Module>.Struct0[12];

		// Token: 0x0400000F RID: 15
		internal readonly <Module>.Struct0[] struct0_4 = new <Module>.Struct0[12];

		// Token: 0x04000010 RID: 16
		internal readonly <Module>.Struct0[] struct0_5 = new <Module>.Struct0[12];

		// Token: 0x04000011 RID: 17
		internal readonly <Module>.Class1.Class2 class2_0 = new <Module>.Class1.Class2();

		// Token: 0x04000012 RID: 18
		internal readonly <Module>.Class1.Class3 class3_0 = new <Module>.Class1.Class3();

		// Token: 0x04000013 RID: 19
		internal readonly <Module>.Class4 class4_0 = new <Module>.Class4();

		// Token: 0x04000014 RID: 20
		internal readonly <Module>.Struct0[] struct0_6 = new <Module>.Struct0[114];

		// Token: 0x04000015 RID: 21
		internal readonly <Module>.Struct1[] struct1_0 = new <Module>.Struct1[4];

		// Token: 0x04000016 RID: 22
		internal readonly <Module>.Class0 class0_0 = new <Module>.Class0();

		// Token: 0x04000017 RID: 23
		internal readonly <Module>.Class1.Class2 class2_1 = new <Module>.Class1.Class2();

		// Token: 0x04000018 RID: 24
		internal bool bool_0;

		// Token: 0x04000019 RID: 25
		internal uint uint_0;

		// Token: 0x0400001A RID: 26
		internal uint uint_1;

		// Token: 0x0400001B RID: 27
		internal <Module>.Struct1 struct1_1 = new <Module>.Struct1(4);

		// Token: 0x0400001C RID: 28
		internal uint uint_2;

		// Token: 0x02000006 RID: 6
		internal class Class2
		{
			// Token: 0x0600001F RID: 31 RVA: 0x00005A90 File Offset: 0x00003C90
			internal void method_0(uint numPosStates)
			{
				for (uint num = this.uint_0; num < numPosStates; num += 1U)
				{
					this.struct1_0[(int)num] = new <Module>.Struct1(3);
					this.struct1_1[(int)num] = new <Module>.Struct1(3);
				}
				this.uint_0 = numPosStates;
			}

			// Token: 0x06000020 RID: 32 RVA: 0x00005ADC File Offset: 0x00003CDC
			internal void method_1()
			{
				this.struct0_0.method_0();
				for (uint num = 0U; num < this.uint_0; num += 1U)
				{
					this.struct1_0[(int)num].method_0();
					this.struct1_1[(int)num].method_0();
				}
				this.struct0_1.method_0();
				this.struct1_2.method_0();
			}

			// Token: 0x06000021 RID: 33 RVA: 0x00005B40 File Offset: 0x00003D40
			internal uint method_2(<Module>.Class0 rangeDecoder, uint posState)
			{
				if (this.struct0_0.method_1(rangeDecoder) == 0U)
				{
					return this.struct1_0[(int)posState].method_1(rangeDecoder);
				}
				uint num = 8U;
				if (this.struct0_1.method_1(rangeDecoder) == 0U)
				{
					num += this.struct1_1[(int)posState].method_1(rangeDecoder);
				}
				else
				{
					num += 8U;
					num += this.struct1_2.method_1(rangeDecoder);
				}
				return num;
			}

			// Token: 0x06000022 RID: 34 RVA: 0x00005BAC File Offset: 0x00003DAC
			internal Class2()
			{
			}

			// Token: 0x0400001D RID: 29
			internal readonly <Module>.Struct1[] struct1_0 = new <Module>.Struct1[16];

			// Token: 0x0400001E RID: 30
			internal readonly <Module>.Struct1[] struct1_1 = new <Module>.Struct1[16];

			// Token: 0x0400001F RID: 31
			internal <Module>.Struct0 struct0_0;

			// Token: 0x04000020 RID: 32
			internal <Module>.Struct0 struct0_1;

			// Token: 0x04000021 RID: 33
			internal <Module>.Struct1 struct1_2 = new <Module>.Struct1(8);

			// Token: 0x04000022 RID: 34
			internal uint uint_0;
		}

		// Token: 0x02000007 RID: 7
		internal class Class3
		{
			// Token: 0x06000023 RID: 35 RVA: 0x00005BE8 File Offset: 0x00003DE8
			internal void method_0(int numPosBits, int numPrevBits)
			{
				if (this.struct2_0 != null)
				{
					if (this.int_1 == numPrevBits)
					{
						if (this.int_0 == numPosBits)
						{
							return;
						}
					}
				}
				this.int_0 = numPosBits;
				this.uint_0 = (1U << numPosBits) - 1U;
				this.int_1 = numPrevBits;
				uint num = 1U << this.int_1 + this.int_0;
				this.struct2_0 = new <Module>.Class1.Class3.Struct2[num];
				for (uint num2 = 0U; num2 < num; num2 += 1U)
				{
					this.struct2_0[(int)num2].method_0();
				}
			}

			// Token: 0x06000024 RID: 36 RVA: 0x00005C6C File Offset: 0x00003E6C
			internal void method_1()
			{
				uint num = 1U << this.int_1 + this.int_0;
				for (uint num2 = 0U; num2 < num; num2 += 1U)
				{
					this.struct2_0[(int)num2].method_1();
				}
			}

			// Token: 0x06000025 RID: 37 RVA: 0x00005CAC File Offset: 0x00003EAC
			internal uint method_2(uint pos, byte prevByte)
			{
				return ((pos & this.uint_0) << this.int_1) + (uint)(prevByte >> 8 - this.int_1);
			}

			// Token: 0x06000026 RID: 38 RVA: 0x00005CDC File Offset: 0x00003EDC
			internal byte method_3(<Module>.Class0 rangeDecoder, uint pos, byte prevByte)
			{
				return this.struct2_0[(int)this.method_2(pos, prevByte)].method_2(rangeDecoder);
			}

			// Token: 0x06000027 RID: 39 RVA: 0x00005D04 File Offset: 0x00003F04
			internal byte method_4(<Module>.Class0 rangeDecoder, uint pos, byte prevByte, byte matchByte)
			{
				return this.struct2_0[(int)this.method_2(pos, prevByte)].method_3(rangeDecoder, matchByte);
			}

			// Token: 0x06000028 RID: 40 RVA: 0x000053E8 File Offset: 0x000035E8
			internal Class3()
			{
			}

			// Token: 0x04000023 RID: 35
			internal <Module>.Class1.Class3.Struct2[] struct2_0;

			// Token: 0x04000024 RID: 36
			internal int int_0;

			// Token: 0x04000025 RID: 37
			internal int int_1;

			// Token: 0x04000026 RID: 38
			internal uint uint_0;

			// Token: 0x02000008 RID: 8
			internal struct Struct2
			{
				// Token: 0x06000029 RID: 41 RVA: 0x00005D2C File Offset: 0x00003F2C
				internal void method_0()
				{
					this.struct0_0 = new <Module>.Struct0[768];
				}

				// Token: 0x0600002A RID: 42 RVA: 0x00005D4C File Offset: 0x00003F4C
				internal void method_1()
				{
					for (int i = 0; i < 768; i++)
					{
						this.struct0_0[i].method_0();
					}
				}

				// Token: 0x0600002B RID: 43 RVA: 0x00005D7C File Offset: 0x00003F7C
				internal byte method_2(<Module>.Class0 rangeDecoder)
				{
					uint num = 1U;
					do
					{
						num = (num << 1) | this.struct0_0[(int)num].method_1(rangeDecoder);
					}
					while (num < 256U);
					return (byte)num;
				}

				// Token: 0x0600002C RID: 44 RVA: 0x00005DB0 File Offset: 0x00003FB0
				internal byte method_3(<Module>.Class0 rangeDecoder, byte matchByte)
				{
					uint num = 1U;
					for (;;)
					{
						uint num2 = (uint)((matchByte >> 7) & 1);
						matchByte = (byte)(matchByte << 1);
						uint num3 = this.struct0_0[(int)((1U + num2 << 8) + num)].method_1(rangeDecoder);
						num = (num << 1) | num3;
						if (num2 != num3)
						{
							break;
						}
						if (num >= 256U)
						{
							goto IL_5C;
						}
					}
					while (num < 256U)
					{
						num = (num << 1) | this.struct0_0[(int)num].method_1(rangeDecoder);
					}
					IL_5C:
					return (byte)num;
				}

				// Token: 0x04000027 RID: 39
				internal <Module>.Struct0[] struct0_0;
			}
		}
	}

	// Token: 0x02000009 RID: 9
	internal class Class4
	{
		// Token: 0x0600002D RID: 45 RVA: 0x00005E1C File Offset: 0x0000401C
		internal void method_0(uint windowSize)
		{
			if (this.uint_2 != windowSize)
			{
				this.byte_0 = new byte[windowSize];
			}
			this.uint_2 = windowSize;
			this.uint_0 = 0U;
			this.uint_1 = 0U;
		}

		// Token: 0x0600002E RID: 46 RVA: 0x00005E54 File Offset: 0x00004054
		internal void method_1(Stream stream, bool solid)
		{
			this.method_2();
			this.stream_0 = stream;
			if (!solid)
			{
				this.uint_1 = 0U;
				this.uint_0 = 0U;
			}
		}

		// Token: 0x0600002F RID: 47 RVA: 0x00005E80 File Offset: 0x00004080
		internal void method_2()
		{
			this.method_3();
			this.stream_0 = null;
			Buffer.BlockCopy(new byte[this.byte_0.Length], 0, this.byte_0, 0, this.byte_0.Length);
		}

		// Token: 0x06000030 RID: 48 RVA: 0x00005EBC File Offset: 0x000040BC
		internal void method_3()
		{
			uint num = this.uint_0 - this.uint_1;
			if (num == 0U)
			{
				return;
			}
			this.stream_0.Write(this.byte_0, (int)this.uint_1, (int)num);
			if (this.uint_0 >= this.uint_2)
			{
				this.uint_0 = 0U;
			}
			this.uint_1 = this.uint_0;
		}

		// Token: 0x06000031 RID: 49 RVA: 0x00005F14 File Offset: 0x00004114
		internal void method_4(uint distance, uint len)
		{
			uint num = this.uint_0 - distance - 1U;
			if (num >= this.uint_2)
			{
				num += this.uint_2;
			}
			while (len > 0U)
			{
				if (num >= this.uint_2)
				{
					num = 0U;
				}
				byte[] array = this.byte_0;
				uint num2 = this.uint_0;
				this.uint_0 = num2 + 1U;
				array[(int)num2] = this.byte_0[(int)num++];
				if (this.uint_0 >= this.uint_2)
				{
					this.method_3();
				}
				len -= 1U;
			}
		}

		// Token: 0x06000032 RID: 50 RVA: 0x00005F8C File Offset: 0x0000418C
		internal void method_5(byte b)
		{
			byte[] array = this.byte_0;
			uint num = this.uint_0;
			this.uint_0 = num + 1U;
			array[(int)num] = b;
			if (this.uint_0 >= this.uint_2)
			{
				this.method_3();
			}
		}

		// Token: 0x06000033 RID: 51 RVA: 0x00005FC8 File Offset: 0x000041C8
		internal byte method_6(uint distance)
		{
			uint num = this.uint_0 - distance - 1U;
			if (num >= this.uint_2)
			{
				num += this.uint_2;
			}
			return this.byte_0[(int)num];
		}

		// Token: 0x06000034 RID: 52 RVA: 0x000053E8 File Offset: 0x000035E8
		internal Class4()
		{
		}

		// Token: 0x04000028 RID: 40
		internal byte[] byte_0;

		// Token: 0x04000029 RID: 41
		internal uint uint_0;

		// Token: 0x0400002A RID: 42
		internal Stream stream_0;

		// Token: 0x0400002B RID: 43
		internal uint uint_1;

		// Token: 0x0400002C RID: 44
		internal uint uint_2;
	}

	// Token: 0x0200000A RID: 10
	internal struct Struct3
	{
		// Token: 0x06000035 RID: 53 RVA: 0x00005FFC File Offset: 0x000041FC
		internal void method_0()
		{
			this.uint_0 = 0U;
		}

		// Token: 0x06000036 RID: 54 RVA: 0x00006010 File Offset: 0x00004210
		internal void method_1()
		{
			if (this.uint_0 < 4U)
			{
				this.uint_0 = 0U;
				return;
			}
			if (this.uint_0 >= 10U)
			{
				this.uint_0 -= 6U;
				return;
			}
			this.uint_0 -= 3U;
		}

		// Token: 0x06000037 RID: 55 RVA: 0x00006058 File Offset: 0x00004258
		internal void method_2()
		{
			this.uint_0 = ((this.uint_0 < 7U) ? 7U : 10U);
		}

		// Token: 0x06000038 RID: 56 RVA: 0x0000607C File Offset: 0x0000427C
		internal void method_3()
		{
			this.uint_0 = ((this.uint_0 < 7U) ? 8U : 11U);
		}

		// Token: 0x06000039 RID: 57 RVA: 0x000060A0 File Offset: 0x000042A0
		internal void method_4()
		{
			this.uint_0 = ((this.uint_0 < 7U) ? 9U : 11U);
		}

		// Token: 0x0600003A RID: 58 RVA: 0x000060C4 File Offset: 0x000042C4
		internal bool method_5()
		{
			return this.uint_0 < 7U;
		}

		// Token: 0x0400002D RID: 45
		internal uint uint_0;
	}

	// Token: 0x0200000B RID: 11
	[StructLayout(LayoutKind.Explicit, Size = 7424)]
	internal struct Struct4
	{
	}

	// Token: 0x0200000C RID: 12
	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 448)]
	internal struct Struct5
	{
	}
}
